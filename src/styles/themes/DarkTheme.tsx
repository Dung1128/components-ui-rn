import color from "color";

import { ThemeColors, tokens } from "./tokens";
import type { AppTheme } from "../../types";
import { LightTheme } from "./LightTheme";
import ink from "@/theme/ink";
import white from "@/theme/white";
import blue from "@/theme/blue";
import red from "@/theme/red";
import green from "@/theme/green";
import yellow from "@/theme/yellow";

const { palette, opacity } = tokens.md.ref;

export const DarkTheme: AppTheme = {
  ...LightTheme,
  dark: true,
  mode: "adaptive",
  version: 3,
  colors: {
    text_primary: palette.primary100,
    primary: palette.primary80,
    primaryContainer: palette.primary30,
    secondary: palette.secondary80,
    secondaryContainer: palette.secondary30,
    tertiary: palette.tertiary80,
    tertiaryContainer: palette.tertiary30,
    surface: palette.neutral10,
    surfaceVariant: palette.neutralVariant30,
    surfaceDisabled: color(palette.neutral90)
      .alpha(opacity.level2)
      .rgb()
      .string(),
    background: palette.neutral99,
    error: palette.error80,
    errorContainer: palette.error30,
    onPrimary: palette.primary20,
    onPrimaryContainer: palette.primary90,
    onSecondary: palette.secondary20,
    onSecondaryContainer: palette.secondary90,
    onTertiary: palette.tertiary20,
    onTertiaryContainer: palette.tertiary90,
    onSurface: palette.neutral90,
    onSurfaceVariant: palette.neutralVariant80,
    onSurfaceDisabled: color(palette.neutral90)
      .alpha(opacity.level4)
      .rgb()
      .string(),
    onError: palette.error20,
    onErrorContainer: palette.error80,
    onBackground: palette.neutral90,
    outline: palette.neutralVariant60,
    outlineVariant: palette.neutralVariant30,
    inverseSurface: palette.neutral90,
    inverseOnSurface: palette.neutral20,
    inversePrimary: palette.primary40,
    shadow: palette.neutral0,
    scrim: palette.neutral0,
    backdrop: color(ThemeColors.neutralVariant20).alpha(0.4).rgb().string(),
    elevation: {
      level0: "transparent",
      // Note: Color values with transparency cause RN to transfer shadows to children nodes
      // instead of View component in Surface. Providing solid background fixes the issue.
      // Opaque color values generated with `palette.primary80` used as background
      level1: "rgb(37, 35, 42)", // palette.primary80, alpha 0.05
      level2: "rgb(44, 40, 49)", // palette.primary80, alpha 0.08
      level3: "rgb(49, 44, 56)", // palette.primary80, alpha 0.11
      level4: "rgb(51, 46, 58)", // palette.primary80, alpha 0.12
      level5: "rgb(52, 49, 63)", // palette.primary80, alpha 0.14
    },
    //new theme colors
    // backgroundPrimary: ink.INK5,
    // backgroundSecondary: white.WHITE100,
    // borderBrandDefault: blue.BLUE100,
    // borderCriticalDefault: red.RED100,
    // borderErrorDefault: red.RED100,
    // borderInfoDefault: blue.BLUE100,
    // borderPrimaryDefault: ink.INK10,
    // borderPrimaryDisabled: ink.INK10,
    // borderPrimaryHovered: ink.INK20,
    // borderPrimaryInverseDefault: blue.BLUE100,
    // borderPrimaryPressed: blue.BLUE100,
    // borderSuccessDefault: green.GREEN100,
    // borderWarningDefault: yellow.YELLOW100,
    // iconBrandDefault: blue.BLUE100,
    // iconCriticalDefault: red.RED100,
    // iconErrorDefault: red.RED100,
    // iconInfoDefault: blue.BLUE100,
    // iconPrimaryDefault: ink.INK40,
    // iconPrimaryHover: ink.INK60,
    // iconPrimaryDisabled: ink.INK60,
    // iconPrimaryInverseDefault: white.WHITE100,
    // iconPrimaryInverseHover: white.WHITE80,
    // iconPrimaryInversePressed: white.WHITE60,
    // iconPrimaryPressed: ink.INK60,
    // iconSuccessDefault: green.GREEN100,
    // iconWarningDefault: yellow.YELLOW100,
    // surfaceBrandDefault: string,
    // surfaceBrandDisabled: string,
    // surfaceBrandHover: string,
    // surfaceBrandInverseDefault: string,
    // surfaceBrandInverseHover: string,
    // surfaceBrandInversePressed: string,
    // surfaceBrandPressed: string,
    // surfaceCriticalDefault: string,
    // surfaceCriticalDisabled: string,
    // surfaceCriticalHover: string,
    // surfaceCriticalInverseDefault: string,
    // surfaceCriticalInverseHover: string,
    // surfaceCriticalInversePressed: string,
    // surfaceCriticalPressed: string,
    // surfaceErrorDefault: string,
    // surfaceErrorDisabled: string,
    // surfaceErrorHover: string,
    // surfaceErrorInverseDefault: string,
    // surfaceErrorInverseHover: string,
    // surfaceErrorInversePressed: string,
    // surfaceErrorPressed: string,
    // surfaceInfoDefault: string,
    // surfaceInfoDisabled: string,
    // surfaceInfoHover: string,
    // surfaceInfoInverseDefault: string,
    // surfaceInfoInverseHover: string,
    // surfaceInfoInversePressed: string,
    // surfaceInfoPressed: string,
    // surfacePrimaryDefault: string,
    // surfacePrimaryDisabled: string,
    // surfacePrimaryHover: string,
    // surfacePrimaryInverseDefault: string,
    // surfacePrimaryInverseHover: string,
    // surfacePrimaryInversePressed: string,
    // surfacePrimaryPressed: string,
    // surfaceSecondaryDefault: string,
    // surfaceSecondaryDisabled: string,
    // surfaceSecondaryHover: string,
    // surfaceSecondaryPressed: string,
    // surfaceSuccessDefault: string,
    // surfaceSuccessDisabled: string,
    // surfaceSuccessHover: string,
    // surfaceSuccessInverseDefault: string,
    // surfaceSuccessInverseHover: string,
    // surfaceSuccessInversePressed: string,
    // surfaceSuccessPressed: string,
    // surfaceWarningDefault: string,
    // surfaceWarningDisabled: string,
    // surfaceWarningHover: string,
    // surfaceWarningInverseDefault: string,
    // surfaceWarningInverseHover: string,
    // surfaceWarningInversePressed: string,
    // surfaceWarningPressed: string,
    // textDefault: string,
    // textDisabled: string,
    // textPlaceholder: string,
    // textSecondary: string,
    // textBrandDefault: string,
    // textBrandDisabled: string,
    // textBrandHovered: string,
    // textBrandPressed: string,
    // textCriticalDefault: string,
    // textCriticalDisabled: string,
    // textCriticalHovered: string,
    // textCriticalPressed: string,
    // textErrorDefault: string,
    // textErrorDisabled: string,
    // textErrorHovered: string,
    // textErrorPressed: string,
    // textInfoDefault: string,
    // textInfoDisabled: string,
    // textInfoHovered: string,
    // textInfoPressed: string,
    // textLinkDefault: string,
    // textLinkDisabled: string,
    // textLinkHovered: string,
    // textLinkPressed: string,
    // textLinkVisitedDefault: string,
    // textLinkVisitedDisabled: string,
    // textLinkVisitedHovered: string,
    // textLinkVisitedPressed: string,
    // textOnFillDefault: string,
    // textOnFillDisabled: string,
    // textOnFillHovered: string,
    // textOnFillPressed: string,
    // textSuccessDefault: string,
    // textSuccessDisabled: string,
    // textSuccessHovered: string,
    // textSuccessPressed: string,
    // textWarningDefault: string,
    // textWarningDisabled: string,
    // textWarningHovered: string,
    // textWarningPressed: string,
  },
};
